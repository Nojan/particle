#version 120

// Input vertex data, different for all executions of this shader.
attribute vec3 vertexPosition_modelspace;
attribute vec3 vertexNormal_modelspace;
attribute vec2 textureCoord;

// Output data ; will be interpolated for each fragment.
varying vec2 UV;
varying vec3 vertexNormal_eyespace;
varying vec3 lightDirection;
varying vec3 eye;

// Values that stay constant for the whole mesh.
uniform mat4 mvp;
uniform mat4 mv;
uniform mat3 viewNormal;
uniform vec3 lightPosition;

void main(){
    UV = textureCoord;
	vec4 position_viewspace = mv * vec4(vertexPosition_modelspace, 1);
    vertexNormal_eyespace =  viewNormal * vertexNormal_modelspace;
	vec4 lightPosition_eyespace = mv * vec4(lightPosition, 1);
	lightDirection = normalize(vec3(lightPosition_eyespace - position_viewspace));
	eye = -vec3(position_viewspace);
	gl_Position =  mvp * vec4(vertexPosition_modelspace, 1);
}

